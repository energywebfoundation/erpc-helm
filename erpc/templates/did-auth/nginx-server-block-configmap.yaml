{{- if and (.Values.nginx.existingServerBlockConfigmap) (.Values.didAuthProxy.enabled) }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.nginx.existingServerBlockConfigmap }}
  namespace: {{ .Release.Namespace | quote }}
  labels: 
    {{- include "did-auth-proxy-helm.labels" . | nindent 4 }}
data:
  server-block.conf: |-
    server {
      listen 0.0.0.0:8080;
      server_name  _;
      location ~ ^/(healthchecks-ui|health) {
        resolver kube-dns.kube-system.svc.cluster.local ipv6=off;
        set $erpc {{ include "erpc.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.service.httpPort }};
        proxy_pass http://$erpc;
      }
      location ~ ^/auth {
        resolver kube-dns.kube-system.svc.cluster.local ipv6=off;
        set $didauthproxy {{ include "did-auth-proxy-helm.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local;
        proxy_pass http://$didauthproxy;
      }
      location ~ / {
        resolver kube-dns.kube-system.svc.cluster.local ipv6=off;
        set $erpc {{ include "erpc.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.service.httpPort }};
        auth_request /token_introspection;
        proxy_pass http://$erpc;
      }
      location = /token_introspection {
        resolver kube-dns.kube-system.svc.cluster.local ipv6=off;
        set $didauthproxy {{ include "did-auth-proxy-helm.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local;
        internal;
        proxy_method      GET;
        proxy_set_header  Authorization "$http_authorization";
        proxy_set_header  Content-Length "";
        proxy_pass        http://$didauthproxy/auth/token-introspection;
      }
    }
{{- end }}